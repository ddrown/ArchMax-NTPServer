lwip notes:
 lwip's NO_SYS mode - no threading
 uart write is blocking, so that slows down ping
 LwIP heap in lwip/opt.h: #define MEM_SIZE 1600
  = 200039ac 00000653 B ram_heap
 Packet buffer in lwip/opt.h:
  #define PBUF_POOL_BUFSIZE               LWIP_MEM_ALIGN_SIZE(590)
  #define PBUF_POOL_SIZE                  16
  16*590 = 9440
  actual = 9731
  = 20004210 00002603 B memp_memory_PBUF_POOL_base
 Src/ethernetif.c has the Tx and Rx descriptors for DMA:
  = 20000908 000017d0 B Rx_Buff
  = 200021a0 000017d0 B Tx_Buff


Src/ethernetif - low level ethernet adapter
 low_level_init - mac address and PHY
  - no real mac address assigned to these boards
  - microchip sells i2c eeproms with EUI48s built in for $0.25/1
 low_level_output - copy pbuf into dma txdesc
 low_level_input - copy dma rxdesc into pbuf (uses polling GetReceivedFrame)
 ethernetif_input - calls low_level_input, then netif->input
 ethernetif_update_config - called on link change (disabled)

Src/lwip - adapter to lwip above ethernetif
 MX_LWIP_Init - setup
 MX_LWIP_Process - call in main loop to rx and check timers

Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_eth.c
 HAL_ETH_GetReceivedFrame - polling
 HAL_ETH_GetReceivedFrame_IT - interrupt
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)

dma notes:
DMA checks the descriptor status?
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
RX and TX buffers are circular linked lists?
OSF (SecondFrameOperate) is enabled

timestamp choices:
 pbuf?
 handle the packet directly in low_level_input?
 This PTP trigger signal is connected to the TIM2 ITR1 input selectable by software. The connection is enabled through bits 11 and 10 in the TIM2 option register (TIM2_OR)
 RX: ETH_PTPTSCR_TSE
 TX: ETH_DMATXDESC_TTSE
 Clock is 168MHz
 TSSIPV4FE: Time stamp snapshot for IPv4 frames enable - When this bit is set, the time stamp snapshot is taken for IPv4 frames.
 TSSIPV6FE: Time stamp snapshot for IPv6 frames enable - When this bit is set, the time stamp snapshot is taken for IPv6 frames.
 TSSSR: Time stamp subsecond rollover: digital or binary rollover control - rollover at 999,999,999 (set) or 0x7FFFFFFF (clear)
 TSSARFE: Time stamp snapshot for all received frames enable - When this bit is set, the time stamp snapshot is enabled for all frames received by the core
 TSARU: Time stamp addend register update - fine correction
 TSSTU: Time stamp system time update - corse correction
 TSSTI: Time stamp system time initialize
 TSFCU: Time stamp fine or coarse update
 TSE: Time stamp enable - enable/disable system
 ETH_PTPSSIR - subsecond increment amount 5.952ns/(1000000000ns/2^31counts) = 12.781822672916,   13 = .000000006053
 ETH_PTPTSHR - seconds
 ETH_PTPTSLR - subseconds (bit 31 = +/-)
 ETH_PTPTSHUR - seconds init/update
 ETH_PTPTSLUR - subsecond init/update (bit 31 = set- clear+)
 ETH_PTPTSAR - fine adjust (in 2^32 overflows per 20ns) 2^32*50MHz/66MHz = 3253763103 (for 66MHz system clock)
2^32 overflow per 6.053ns at 168MHz
(1/.000000006053*2^32)/168000000 = 4223572034.331657658931

6.053ns/tick
1/.000000006053 = 165207335.205683132331 Hz
4223572034 increment at 168MHz, overflows 32 bit at:
168000000*4223572034/2^32 = 165207335.192710161209 Hz

 ETH_PTPTTHR - target time high
 ETH_PTPTTLR - target time low



PHY notes:
 AN0/AN1 are configured for half-duplex mode by default, code has to change that for full duplex
 DP83848J - http://www.ti.com/lit/ds/symlink/dp83848j.pdf

interrupts at 100kpps in + out are a problem
should tx timestamps be used?
should per client stats be gathered?
how to report stat data - tcp?
GPS data & parsing
PPS aligned with NIC timestamps
NIC timestamps in NTP timescale?
NIC clock control adjustments
NTP root delay and dispersion calculation
TX timestamps used to measure DMA delay and then assume it's constant?
how do multiple packets work with DMA - one at a time?
100kpps = around 1790 cycles per packet (10us)
ddos amplification?
  uint32_t   TimeStampLow;          /*!< Time Stamp Low value for transmit and receive */
  uint32_t   TimeStampHigh;         /*!< Time Stamp High value for transmit and receive */
lwip generated checksums are all disabled, it's relying on the MAC to generate them
link changes do not cause dhcp to renew

leap seconds:
nav-leap ublox msg?
look for a :60 seconds msg and jump the time?

ntp client::
ntp 10.1.2.198
rtt 275281 ns
v: 36 st: 1 id: 5460039 poll: 6 prec: -23
rdelay: 0.256 rdisp: 0.256
reftime: 3574481376.4036374221 origin: 0.0
rx: 3675144672.472069126 tx: 3675144672.4092936454
local rx: 17.165817452 ns

adjust counter speed::
-40511611+7387681
3762565112-3762564978
-33123930
134
-33123930/2^31
-.015424531/134
-.000115108*2^32
-494385.095507968
more negative: going too fast
4228489404-494385
4227995019

timestamp location:
stm32f407 TX timestamp on SFD (start frame delimiter)
stm32f407 RX timestamp on FCS start/payload end? SFD?
LeoBodnar| i don't think PTP cares - their reference point is start of packet for all timing
i211 seems to timestamp on the SFD end/start of packet
i211 has some jitter/latency between RX and TX path (~2us?)
NTP timestamps are on FCS start/packet end? https://www.eecis.udel.edu/~mills/stamp.html

NTP packet size:
Ethernet Preamble: 7 bytes
Ethernet SFD: 1 byte
- 1588 timestamp reference
Ethernet header: 14 bytes
IP header: 20 bytes
UDP header: 8 bytes
NTP: 48 bytes
Ethernet CRC (FCS): 4 bytes
- NTP timestamp reference
Ethernet IPG: 12 bytes

RX adjust = .000000752 @ 1G

114*8
=912 bits

changing timestamp location based on packet size:
912/100000000
=.000009120 seconds per packet
100000000/912
109649 packets per second max

+/- 300ppm:
.000009117
.000009122
=5ns (~ +/- 3ns)

94*8
tx: 752 bits excluding preamble, SFD, IPG
752/100000000
.000007520

rx: 8 bytes
8*8/100000000
.000000640

chrony is adjusting hardware RX timestamps
- process_hw_timestamp
rx_correction = l2_length / (1.0e6 / 8 * iface->link_speed);
=.000000752
this lowers the rtt!

possible reasons things are below the rtt latency limit:
- rx_comp/tx_comp set = no
- clock running fast = it is (verify compare total rtt vs computed rtt = normal)
- timestamps aren't where I expect them to be (yes, chrony adjusts rx timestamp)
- i211 datasheet does mention TX/RX timestamp asymmetry. if TX timestamp is late compared to RX, that would reduce the rtt

TX latency around 14.1 us
RX latency around 21.5 us

max TX rate around 29kpps
1/0.0000356
28089


400mV in 3850 ohms
=.000103 A

regulator is cjt1117-3.3
spec min is 3.267V / 3.235V
100%: 3.319V
5%: 3.318V
4%: 3.223V -- out of spec
3%: 3.212V -- out of spec
<apuls> 1.15V drop. Minimun input voltage must >4.45 V. Cable selfmade or consumer ? Maybe you have some voltage drop through the cable.  the voltage drop of the regulator could increase up to 1.25V if the output current is ~1A
min input@low: 4.45V
min input@1A: 4.55V

current = 0.19A
at computer = 5.04V
at board = 4.85V
around 1ohm?
switched cables, now 4.92V at board
removed USB sensor, now 4.94V
~0.5 ohm cable

5.04 - 4.45
=.59

adc   multimeter
1.518 1.503
1.519 1.480
1.515 1.494
1.512 1.516
1.511 1.508

adc   multimeter
3.318 3.301
3.317 3.302

adc   multimeter
2.351 2.473
0.790 0.751
0.784 0.750
0.836 0.814


when the TMP36 is connected, voltage falls to 0.1V from 0.7V - too much current?
 - test current from meter


TMP36 resistor = 5.55k
top 5V = 5.53k
bottom 5V = 5.55k

try using 2k dividers?


// 5V divider
    PA0-WKUP     ------> ADC1_IN0
// thermistor
    PA4     ------> ADC1_IN4
// tmp36
    PA5     ------> ADC1_IN5

// L2:2 - GPS PPS
    PA3     ------> TIM2_CH4

// R2:1 - GPS
    P??     ------> ?
// R2:2 - GPS
    PD6     ------> USART2_RX

// R3:3
    PC10     ------> USART3_TX
// R3:4
    PC11     ------> USART3_RX

// R3:5
    PC12     ------> UART5_TX
// R3:6
    PD2     ------> UART5_RX

// DEBUG
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX

// was used for BME280
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA


eth_pps_out
PB5 -- R1:7



1G/100M asymmetry

Ethernet Preamble: 7 bytes
Ethernet SFD: 1 byte
- 1588 timestamp reference
Ethernet header: 14 bytes
IP header: 20 bytes
UDP header: 8 bytes
NTP: 48 bytes
Ethernet CRC (FCS): 4 bytes

752 bits (body)
64 bits (header)
46+48

100M -> 1G
7520 ns + 64 ns = 7584 ns
1G -> 100M
752 ns + 640 ns = 1392 ns

difference: 6192 ns
would be an offset of: 3096 ns

100M round trip time:
1504 bits
.000015040

1G round trip time:
1504 bits
.000001504

PHY asymmetry:
[archmax] DP83848J - http://www.ti.com/lit/ds/symlink/dp83848j.pdf

RX delay:
T2.25.3: JK symbol -> CRS DV = 18.5 bits
18.5/100000000 = .000000185
T2.25.5: RXD[1:0] latency from symbol on receive pair = 38 bits (default elasticisty of 4 bits)
38/100000000   = .000000380


TX delay:
T2.24.4 X1 Clock to PMD Output Pair Latency From X1 Rising edge to first bit of symbol = 17 bits
17/100M          = 0.000000170

[stm32mp1] RTL8211F-CG https://datasheet.lcsc.com/szlcsc/1909021205_Realtek-Semicon-RTL8211F-CG_C187932.pdf
Table 60. RGMII Timing Parameters
TsetupT - Data to Clock Output Setup Time at transmitter	typ:2 ns
TholdT  - Clock to Data Output Hold Time at transmitter		typ:2 ns
TsetupR - Data to Clock Input Setup Time at receiver		typ:2 ns
TholdR  - Clock to Data Input Hold Time at receiver		typ:2 ns
